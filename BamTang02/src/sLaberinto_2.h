/*========================================================================*\
|* sLaberinto_2.h
\*========================================================================*/

#pragma once
//--------------------------------------------------------------------------
// Include
//--------------------------------------------------------------------------
#include "sLaberinto.h"
#include "sPos.h"
#include <unordered_map>
//--------------------------------------------------------------------------

//--------------------------------------------------------------------------
// Constantes
//--------------------------------------------------------------------------
//--------------------------------------------------------------------------
// Valores definidos para marcar:
//--------------------------------------------------------------------------
//--------------------------------------------------------------------------

//--------------------------------------------------------------------------
// Enumerados
//--------------------------------------------------------------------------
//--------------------------------------------------------------------------
//--------------------------------------------------------------------------
//--------------------------------------------------------------------------


//--------------------------------------------------------------------------
// Struct
//--------------------------------------------------------------------------
//--------------------------------------------------------------------------

//
// Una estructura en c++ es simplemente una clase con sus elementos publicos
// Así que meteremos en la parte privada aquello que no queremos que se
// tenga acceso.
//
struct sLaberinto_2
    : public sLaberinto
{
    sLaberinto_2();
    ~sLaberinto_2();

private:

    virtual int creaLaberinto() override;

    void removeWall(sCoord cur, int ancho_celda, int alto_celda);
    void ramdomize(int* array, int n);
    bool isValidPosition(sCoord cur, int alto, int ancho);
    void copyRow(int row_src, int row_dest, int ancho);
    void copyCol(int col_src, int col_dest, int alto);
    void copyValidRowsAndCols(int alto, int ancho);

    sPos calculaCaminoMasLargo();
    void quitarElemento(std::unordered_map<int, sPos>& mapPos, int index);
};


/*========================================================================*\
|* Fin de sLaberinto_2.h
\*========================================================================*/
